# Final refactored src_trg_validator.py that integrates with your existing snowflake_connection.py

import os
import pandas as pd
import json
from pathlib import Path
from snowflake_connection import get_snowflake_connection
from ace_tools import display_dataframe_to_user

# Configuration
SOURCE_SQL_PATH = "input/source_query.sql"
TARGET_SQL_PATH = "input/target_query.sql"
CONFIG_PATH = "config.json"
OUTPUT_PATH = "output"

# Create output directory if it doesn't exist
Path(OUTPUT_PATH).mkdir(parents=True, exist_ok=True)

# Load SQL files
with open(SOURCE_SQL_PATH, 'r') as f:
    source_sql = f.read()

with open(TARGET_SQL_PATH, 'r') as f:
    target_sql = f.read()

# Load config to get table name for output naming
with open(CONFIG_PATH) as f:
    config = json.load(f)

table_name = config.get("table_name", "validation_results").replace(".", "_")

# Connect using shared Snowflake connection method
conn, *_ = get_snowflake_connection(CONFIG_PATH)

def fetch_dataframe(query):
    cur = conn.cursor()
    cur.execute(query)
    cols = [col[0] for col in cur.description]
    data = cur.fetchall()
    cur.close()
    return pd.DataFrame(data, columns=cols)

# Execute source and target queries
df_src = fetch_dataframe(source_sql)
df_trg = fetch_dataframe(target_sql)

# Row count check
src_count = len(df_src)
trg_count = len(df_trg)

count_df = pd.DataFrame({
    "Query": ["Source Query", "Target Query"],
    "Row_Count": [src_count, trg_count],
    "Status": [" Matched" if src_count == trg_count else " Mismatch"] * 2,
    "Notes": [
        "Counts are equal" if src_count == trg_count else f"Difference: {abs(src_count - trg_count)} rows",
        "Counts are equal" if src_count == trg_count else f"Difference: {abs(src_count - trg_count)} rows"
    ]
})

# SRC MINUS TRG
src_minus_trg = pd.merge(df_src, df_trg, how='outer', indicator=True).query('_merge == "left_only"').drop(columns=['_merge'])
trg_minus_src = pd.merge(df_trg, df_src, how='outer', indicator=True).query('_merge == "left_only"').drop(columns=['_merge'])

# Write to Excel
output_file = os.path.join(OUTPUT_PATH, f"{table_name}_comparison_results.xlsx")

with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
    count_df.to_excel(writer, sheet_name='count_check', index=False)
    if not src_minus_trg.empty:
        src_minus_trg.head(10).to_excel(writer, sheet_name='src_minus_trg', index=False)
    else:
        pd.DataFrame([" No rows found in source that are missing in target"], columns=["Message"]).to_excel(writer, sheet_name='src_minus_trg', index=False)
    
    if not trg_minus_src.empty:
        trg_minus_src.head(10).to_excel(writer, sheet_name='trg_minus_src', index=False)
    else:
        pd.DataFrame([" No rows found in target that are missing in source"], columns=["Message"]).to_excel(writer, sheet_name='trg_minus_src', index=False)

# Show result in console
display_dataframe_to_user("Row Count Comparison", count_df)
print("\n Count Comparison:")
print(count_df)

if not src_minus_trg.empty:
    print("\n Rows in source but not in target:")
    print(src_minus_trg.head(10))
else:
    print("\n No rows in source that are missing in target")

if not trg_minus_src.empty:
    print("\n Rows in target but not in source:")
    print(trg_minus_src.head(10))
else:
    print("\n No rows in target that are missing in source")

conn.close()
output_file
